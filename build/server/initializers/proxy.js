// Generated by CoffeeScript 1.7.1
var Application, ControllerClient, client, fs, getAuthController, haibuClient, proxyHost, proxyPort, request, resetProxy, resetRoutes, updateApps, updateRoutes;

fs = require('fs');

request = require('request-json');

Application = require('../models/application');

ControllerClient = require("cozy-clients").ControllerClient;

proxyHost = process.env.PROXY_PORT_9104_TCP_ADDR || 'localhost';

proxyPort = process.env.PROXY_PORT_9104_TCP_PORT || '9104';

client = request.newClient("http://" + proxyHost + ":" + proxyPort);

getAuthController = function() {
  var err, token;
  if (process.env.NODE_ENV === 'production') {
    try {
      token = fs.readFileSync('/etc/cozy/controller.token', 'utf8');
      token = token.split('\n')[0];
      return token;
    } catch (_error) {
      err = _error;
      console.log(err.message);
      console.log(err.stack);
      return null;
    }
  } else {
    return "";
  }
};

haibuClient = new ControllerClient({
  token: getAuthController(),
  host: process.env.CONTROLLER_PORT_9002_TCP_ADDR,
  port: process.env.CONTROLLER_PORT_9002_TCP_PORT
});

updateRoutes = function(occurence) {
  if (occurence < 10) {
    resetRoutes();
    return setTimeout((function(_this) {
      return function() {
        return updateRoutes(occurence + 1);
      };
    })(this), 30000);
  } else if (occurence < 15) {
    resetRoutes();
    return setTimeout((function(_this) {
      return function() {
        return updateRoutes(occurence + 1);
      };
    })(this), 60000);
  }
};

resetRoutes = function() {
  return Application.all(function(err, installedApps) {
    var appDict, installedApp, _i, _len;
    appDict = {};
    if (installedApps !== void 0) {
      for (_i = 0, _len = installedApps.length; _i < _len; _i++) {
        installedApp = installedApps[_i];
        if (installedApp.name !== "") {
          appDict[installedApp.slug] = installedApp;
        } else {
          installedApp.destroy();
        }
      }
    }
    return haibuClient.running(function(err, res, apps) {
      return updateApps(apps, appDict, resetProxy);
    });
  });
};

updateApps = function(apps, appDict, callback) {
  var app, installedApp;
  if ((apps != null) && apps.length > 0) {
    app = apps.pop();
    installedApp = appDict[app.name];
    if ((installedApp != null) && installedApp.port !== app.port) {
      return installedApp.updateAttributes({
        port: app.port
      }, function(err) {
        return updateApps(apps, appDict, callback);
      });
    } else {
      return updateApps(apps, appDict, callback);
    }
  } else {
    return callback();
  }
};

resetProxy = function() {
  return client.get('routes/reset/', function(err, res, body) {
    if ((res != null) && res.statusCode === 200) {
      return console.info('Proxy successfuly reseted.');
    } else {
      return console.info('Something went wrong while reseting proxy.');
    }
  });
};

module.exports = function() {
  return resetRoutes();
};
